--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone V" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=64 LPM_SHOWAHEAD="OFF" LPM_WIDTH=32 LPM_WIDTH_R=16 LPM_WIDTHU=6 LPM_WIDTHU_R=7 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=4 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRSYNC_DELAYPIPE=4 data q rdclk rdreq wrclk wrempty wrfull wrreq wrusedw ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone V" LOW_POWER_MODE="AUTO" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 16.0 cbx_a_gray2bin 2016:04:20:18:35:29:SJ cbx_a_graycounter 2016:04:20:18:35:29:SJ cbx_altdpram 2016:04:20:18:35:29:SJ cbx_altera_syncram 2016:04:20:18:35:29:SJ cbx_altera_syncram_nd_impl 2016:04:20:18:35:29:SJ cbx_altsyncram 2016:04:20:18:35:29:SJ cbx_cycloneii 2016:04:20:18:35:29:SJ cbx_dcfifo 2016:04:20:18:35:29:SJ cbx_fifo_common 2016:04:20:18:35:29:SJ cbx_lpm_add_sub 2016:04:20:18:35:29:SJ cbx_lpm_compare 2016:04:20:18:35:29:SJ cbx_lpm_counter 2016:04:20:18:35:29:SJ cbx_lpm_decode 2016:04:20:18:35:29:SJ cbx_lpm_mux 2016:04:20:18:35:29:SJ cbx_mgl 2016:04:20:19:36:45:SJ cbx_nadder 2016:04:20:18:35:29:SJ cbx_scfifo 2016:04:20:18:35:29:SJ cbx_stratix 2016:04:20:18:35:29:SJ cbx_stratixii 2016:04:20:18:35:29:SJ cbx_stratixiii 2016:04:20:18:35:29:SJ cbx_stratixv 2016:04:20:18:35:29:SJ cbx_util_mgl 2016:04:20:18:35:29:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION a_gray2bin_e9b (gray[6..0])
RETURNS ( bin[6..0]);
FUNCTION a_graycounter_ag6 (clock, cnt_en)
RETURNS ( q[6..0]);
FUNCTION a_graycounter_7ub (clock, cnt_en)
RETURNS ( q[6..0]);
FUNCTION altsyncram_j671 (address_a[5..0], address_b[6..0], addressstall_b, clock0, clock1, clocken1, data_a[31..0], wren_a)
RETURNS ( q_b[15..0]);
FUNCTION alt_synch_pipe_f9l (clock, d[6..0])
RETURNS ( q[6..0]);
FUNCTION dffpipe_vu8 (clock, d[6..0])
RETURNS ( q[6..0]);
FUNCTION alt_synch_pipe_g9l (clock, d[6..0])
RETURNS ( q[6..0]);
FUNCTION cmpr_vu5 (dataa[6..0], datab[6..0])
RETURNS ( aeb);
FUNCTION cntr_aed (clock, cnt_en)
RETURNS ( cout, q[0..0]);

--synthesis_resources = lut 9 M10K 1 reg 85 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=d103;SYNCHRONIZER_IDENTIFICATION=OFF;SYNCHRONIZATION_REGISTER_CHAIN_LENGTH = 2;{-to wrptr_g} suppress_da_rule_internal=S102;-name CUT ON -from rdptr_g -to ws_dgrp|dffpipe_1v8:dffpipe16|dffe17a;-name SDC_STATEMENT ""set_false_path -from *rdptr_g* -to *ws_dgrp|dffpipe_1v8:dffpipe16|dffe17a* "";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|dffpipe_0v8:dffpipe12|dffe13a;-name SDC_STATEMENT ""set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|dffpipe_0v8:dffpipe12|dffe13a* """;

SUBDESIGN dcfifo_ucm1
( 
	data[31..0]	:	input;
	q[15..0]	:	output;
	rdclk	:	input;
	rdreq	:	input;
	wrclk	:	input;
	wrempty	:	output;
	wrfull	:	output;
	wrreq	:	input;
	wrusedw[5..0]	:	output;
) 
VARIABLE 
	wrptr_g_gray2bin : a_gray2bin_e9b;
	ws_dgrp_gray2bin : a_gray2bin_e9b;
	rdptr_g1p : a_graycounter_ag6;
	wrptr_g1p : a_graycounter_7ub;
	fifo_ram : altsyncram_j671;
	delayed_wrptr_g[6..0] : dffe;
	rdptr_b[0..0] : dffe;
	rdptr_g[6..0] : dffe;
	wrptr_g[6..0] : dffe;
	rs_dgwp : alt_synch_pipe_f9l;
	ws_brp : dffpipe_vu8;
	ws_bwp : dffpipe_vu8;
	ws_dgrp : alt_synch_pipe_g9l;
	wrusedw_sub_dataa[6..0]	:	WIRE;
	wrusedw_sub_datab[6..0]	:	WIRE;
	wrusedw_sub_result[6..0]	:	WIRE;
	rdempty_eq_comp : cmpr_vu5;
	wrempty_eq_comp : cmpr_vu5;
	wrfull_eq_comp : cmpr_vu5;
	cntr_b : cntr_aed;
	int_rdempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[5..0]	: WIRE;
	ram_address_b[6..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_gs[6..0]	: WIRE;

BEGIN 
	wrptr_g_gray2bin.gray[] = wrptr_g[].q;
	ws_dgrp_gray2bin.gray[] = ws_dgrp.q[];
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = (valid_rdreq & cntr_b.cout);
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! valid_rdreq);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].d = wrptr_g[].q;
	rdptr_b[].clk = rdclk;
	rdptr_b[].d = cntr_b.q[];
	rdptr_b[].ena = valid_rdreq;
	rdptr_g[].clk = rdclk;
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrptr_g[].clk = wrclk;
	wrptr_g[].d = wrptr_g1p.q[];
	wrptr_g[].ena = valid_wrreq;
	rs_dgwp.clock = rdclk;
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_brp.clock = wrclk;
	ws_brp.d[] = ws_dgrp_gray2bin.bin[];
	ws_bwp.clock = wrclk;
	ws_bwp.d[] = wrptr_g_gray2bin.bin[];
	ws_dgrp.clock = wrclk;
	ws_dgrp.d[] = rdptr_g[].q;
	wrusedw_sub_result[] = wrusedw_sub_dataa[] - wrusedw_sub_datab[];
	wrusedw_sub_dataa[] = ws_bwp.q[];
	wrusedw_sub_datab[] = ws_brp.q[];
	rdempty_eq_comp.dataa[] = rs_dgwp.q[];
	rdempty_eq_comp.datab[] = rdptr_g[].q;
	wrempty_eq_comp.dataa[] = ws_dgrp.q[];
	wrempty_eq_comp.datab[] = wrptr_g[].q;
	wrfull_eq_comp.dataa[] = ws_dgrp.q[];
	wrfull_eq_comp.datab[] = wrptr_gs[];
	cntr_b.clock = rdclk;
	cntr_b.cnt_en = valid_rdreq;
	int_rdempty = rdempty_eq_comp.aeb;
	int_wrfull = wrfull_eq_comp.aeb;
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_g[6..6].q $ wrptr_g[5..5].q), wrptr_g[4..0].q);
	ram_address_b[] = ( (rdptr_g1p.q[6..6] $ rdptr_g1p.q[5..5]), rdptr_g1p.q[4..0], cntr_b.q[]);
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrempty = wrempty_eq_comp.aeb;
	wrfull = int_wrfull;
	wrptr_gs[] = ( (! wrptr_g[6..6].q), (! wrptr_g[5..5].q), wrptr_g[4..0].q);
	wrusedw[] = ( wrusedw_sub_result[5..0]);
END;
--VALID FILE
