--lpm_counter DEVICE_FAMILY="Cyclone V" lpm_avalue=1 lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_pvalue=1 lpm_width=1 clock cnt_en cout q
--VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:20:18:35:29:SJ cbx_lpm_add_sub 2016:04:20:18:35:29:SJ cbx_lpm_compare 2016:04:20:18:35:29:SJ cbx_lpm_counter 2016:04:20:18:35:29:SJ cbx_lpm_decode 2016:04:20:18:35:29:SJ cbx_mgl 2016:04:20:19:36:45:SJ cbx_nadder 2016:04:20:18:35:29:SJ cbx_stratix 2016:04:20:18:35:29:SJ cbx_stratixii 2016:04:20:18:35:29:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION cyclonev_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, sharein)
WITH ( DONT_TOUCH, EXTENDED_LUT, LUT_MASK, SHARED_ARITH)
RETURNS ( combout, cout, shareout, sumout);

--synthesis_resources = lut 1 reg 1 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to counter_reg_bit0} POWER_UP_LEVEL=HIGH";

SUBDESIGN cntr_aed
( 
	clock	:	input;
	cnt_en	:	input;
	cout	:	output;
	q[0..0]	:	output;
) 
VARIABLE 
	counter_reg_bit0 : dffeas
		WITH (
			power_up = "high"
		);
	counter_comb_bita0 : cyclonev_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "000000000000FF00",
			SHARED_ARITH = "off"
		);
	aclr_actual	: WIRE;
	clk_en	: NODE;
	cout_actual	: WIRE;
	data[0..0]	: NODE;
	external_cin	: WIRE;
	lsb_cin	: WIRE;
	s_val[0..0]	: WIRE;
	safe_q[0..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	time_to_clear	: WIRE;
	updown_dir	: WIRE;
	updown_lsb	: WIRE;
	updown_other_bits	: WIRE;

BEGIN 
	counter_reg_bit[0..0].asdata = ((sset & s_val[]) # ((! sset) & data[]));
	counter_reg_bit[0..0].clk = clock;
	counter_reg_bit[0..0].clrn = (! aclr_actual);
	counter_reg_bit[0..0].d = ( counter_comb_bita[0].sumout);
	counter_reg_bit[0..0].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit[0..0].sclr = sclr;
	counter_reg_bit[0..0].sload = (sset # sload);
	counter_comb_bita[0..0].cin = ( lsb_cin);
	counter_comb_bita[0..0].datad = ( counter_reg_bit[0..0].q);
	counter_comb_bita[0..0].dataf = ( updown_lsb);
	aclr_actual = B"0";
	clk_en = VCC;
	cout = cout_actual;
	cout_actual = (((! counter_comb_bita[0].cout) $ updown_other_bits) # (time_to_clear & updown_dir));
	data[] = GND;
	external_cin = B"1";
	lsb_cin = B"0";
	q[] = safe_q[];
	s_val[] = B"1";
	safe_q[] = counter_reg_bit[0..0].q;
	sclr = GND;
	sload = GND;
	sset = GND;
	time_to_clear = B"0";
	updown_dir = B"1";
	updown_lsb = updown_dir;
	updown_other_bits = ((! external_cin) # updown_dir);
END;
--VALID FILE
